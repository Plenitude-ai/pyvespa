name: Notebooks - cloud

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  schedule:
    - cron: "0 11 * * 0"

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  get-notebooks-cloud:
    runs-on: ubuntu-latest
    outputs:
      notebooks: ${{ steps.set_output.outputs.notebooks }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set output variable (Make sure it is this quote format - "[path/to/notebook1.ipynb", "path/to/notebook2.ipynb]")
        id: set_output
        run: |
          notebooks=$(find docs/sphinx/source -name '*cloud.ipynb' ! -name 'mother-of-all-embedding-models-cloud.ipynb' ! -name 'scaling-personal-ai-assistants-with-streaming-mode-cloud.ipynb' | jq -R -s -c 'split("\n")[:-1]')
          # Print all notebooks echo
          echo $notebooks
          echo "notebooks=$notebooks" >> $GITHUB_OUTPUT

  notebooks-cloud:
    runs-on: ubuntu-latest
    needs: get-notebooks-cloud
    strategy:
      matrix:
        notebook: ${{fromJson(needs.get-notebooks-cloud.outputs.notebooks)}}

    steps:
      - name: Free disk space
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be

      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Set up uv
        # Install a specific uv version using the installer
        run: curl -LsSf https://astral.sh/uv/0.4.5/install.sh | sh

      - name: Install dependencies
        run: |
          uv sync --extra dev --extra notebooks

      - name: Run notebooks tests
        env:
          VESPA_TEAM_API_KEY: ${{ secrets.VESPA_TEAM_API_KEY }}
          VESPA_CLOUD_SECRET_TOKEN: ${{ secrets.VESPA_CLOUD_SECRET_TOKEN }}
          CO_API_KEY: ${{ secrets.CO_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          UV_SYSTEM_PYTHON: 1
        run: |
          echo "Running ${{ matrix.notebook }}"

          # Function to extract, modify, and comment out the pip install command
          function extract_and_modify_pip_installation {
              # 1. Extract code cells, strip quotes, and search for pip install lines
              jq '.cells[] | select(.cell_type == "code") | .source[]' "$1" | sed 's/^"//;s/"$//' | grep -E '^!pip(3)? install( -U)? ' | while read -r line ; do
                  
                  # 2. Strip the leading "!" and remove 'pyvespa' and 'vespacli'
                  modified_line=$(echo "$line" | sed 's/^!//' | sed 's/pyvespa//g' | sed 's/vespacli//g' | sed 's/  / /g')

                  # 3. Comment out the original line in the notebook
                  tmpfile=$(mktemp)
                  jq --arg old "$line" --arg new "# $line" '
                      (.cells[] | select(.cell_type == "code") | .source[] | select(. == $old)) = $new
                  ' "$1" > "$tmpfile" && mv "$tmpfile" "$1"
              done
          }

          # Call the function to process pip install lines and modify the notebook
          extract_and_modify_pip_installation "${{ matrix.notebook }}"

          # Install additional requirements with uv
          uv pip install -r additional_requirements.txt

          # Run the modified notebook
          papermill --log-output ${{ matrix.notebook }} ${{ matrix.notebook }}-out.ipynb
